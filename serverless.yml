service: serverless-crud

provider:
  name: aws
  environment: ${file(./env.yml):${opt:stage, self:provider.stage}}
  runtime: nodejs4.3
  region: us-east-1

package:
  exclude:
    - .git/**

functions:
  create:
    handler: handler.create
    events:
      - http:
          path: todos
          method: post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: ${self:provider.environment.AUTH_ARN}
  toggleAll:
    handler: handler.toggleAll
    events:
      - http:
          path: todos/toggle
          method: post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: ${self:provider.environment.AUTH_ARN}
  clear:
    handler: handler.clear
    events:
      - http:
          path: todos/clear
          method: post
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: ${self:provider.environment.AUTH_ARN}
  readAll:
    handler: handler.readAll
    events:
      - http:
          path: todos
          method: get
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          authorizer: ${self:provider.environment.AUTH_ARN}
  readOne:
    handler: handler.readOne
    events:
      - http:
          path: todos/{id}
          method: get
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
            methods:
              - OPTIONS
              - GET
              - PUT
              - DELETE
          authorizer: ${self:provider.environment.AUTH_ARN}
  update:
    handler: handler.update
    events:
      - http:
          path: todos/{id}
          method: put
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            methods:
              - OPTIONS
              - GET
              - PUT
              - DELETE
            allowCredentials: true
          authorizer: ${self:provider.environment.AUTH_ARN}
  delete:
    handler: handler.delete
    events:
      - http:
          path: todos/{id}
          method: delete
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            methods:
              - OPTIONS
              - GET
              - PUT
              - DELETE
            allowCredentials: true
          authorizer: ${self:provider.environment.AUTH_ARN}
